// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: floyd.proto

#include "floyd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_floyd_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CmdRequest_AddServerRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CmdRequest_RaftTaskRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CmdRequest_RemoveServerRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CmdRequest_RequestVote;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CmdRequest_ServerStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CmdResponse_AppendEntriesResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CmdResponse_RaftTaskResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CmdResponse_RequestVoteResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CmdResponse_ServerStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Entry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Membership;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_floyd_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CmdRequest_AppendEntries;
}  // namespace protobuf_floyd_2eproto
namespace floyd {
class EntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Entry>
      _instance;
} _Entry_default_instance_;
class CmdRequest_RequestVoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdRequest_RequestVote>
      _instance;
} _CmdRequest_RequestVote_default_instance_;
class CmdRequest_AppendEntriesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdRequest_AppendEntries>
      _instance;
} _CmdRequest_AppendEntries_default_instance_;
class CmdRequest_AddServerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdRequest_AddServerRequest>
      _instance;
} _CmdRequest_AddServerRequest_default_instance_;
class CmdRequest_RemoveServerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdRequest_RemoveServerRequest>
      _instance;
} _CmdRequest_RemoveServerRequest_default_instance_;
class CmdRequest_ServerStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdRequest_ServerStatus>
      _instance;
} _CmdRequest_ServerStatus_default_instance_;
class CmdRequest_RaftTaskRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdRequest_RaftTaskRequest>
      _instance;
} _CmdRequest_RaftTaskRequest_default_instance_;
class CmdRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdRequest>
      _instance;
} _CmdRequest_default_instance_;
class CmdResponse_RequestVoteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdResponse_RequestVoteResponse>
      _instance;
} _CmdResponse_RequestVoteResponse_default_instance_;
class CmdResponse_AppendEntriesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdResponse_AppendEntriesResponse>
      _instance;
} _CmdResponse_AppendEntriesResponse_default_instance_;
class CmdResponse_RaftTaskResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdResponse_RaftTaskResponse>
      _instance;
} _CmdResponse_RaftTaskResponse_default_instance_;
class CmdResponse_ServerStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdResponse_ServerStatus>
      _instance;
} _CmdResponse_ServerStatus_default_instance_;
class CmdResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdResponse>
      _instance;
} _CmdResponse_default_instance_;
class MembershipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Membership>
      _instance;
} _Membership_default_instance_;
}  // namespace floyd
namespace protobuf_floyd_2eproto {
static void InitDefaultsEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_Entry_default_instance_;
    new (ptr) ::floyd::Entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::Entry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Entry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEntry}, {}};

static void InitDefaultsCmdRequest_RequestVote() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_CmdRequest_RequestVote_default_instance_;
    new (ptr) ::floyd::CmdRequest_RequestVote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::CmdRequest_RequestVote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdRequest_RequestVote =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdRequest_RequestVote}, {}};

static void InitDefaultsCmdRequest_AppendEntries() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_CmdRequest_AppendEntries_default_instance_;
    new (ptr) ::floyd::CmdRequest_AppendEntries();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::CmdRequest_AppendEntries::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CmdRequest_AppendEntries =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCmdRequest_AppendEntries}, {
      &protobuf_floyd_2eproto::scc_info_Entry.base,}};

static void InitDefaultsCmdRequest_AddServerRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_CmdRequest_AddServerRequest_default_instance_;
    new (ptr) ::floyd::CmdRequest_AddServerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::CmdRequest_AddServerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdRequest_AddServerRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdRequest_AddServerRequest}, {}};

static void InitDefaultsCmdRequest_RemoveServerRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_CmdRequest_RemoveServerRequest_default_instance_;
    new (ptr) ::floyd::CmdRequest_RemoveServerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::CmdRequest_RemoveServerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdRequest_RemoveServerRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdRequest_RemoveServerRequest}, {}};

static void InitDefaultsCmdRequest_ServerStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_CmdRequest_ServerStatus_default_instance_;
    new (ptr) ::floyd::CmdRequest_ServerStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::CmdRequest_ServerStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdRequest_ServerStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdRequest_ServerStatus}, {}};

static void InitDefaultsCmdRequest_RaftTaskRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_CmdRequest_RaftTaskRequest_default_instance_;
    new (ptr) ::floyd::CmdRequest_RaftTaskRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::CmdRequest_RaftTaskRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdRequest_RaftTaskRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdRequest_RaftTaskRequest}, {}};

static void InitDefaultsCmdRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_CmdRequest_default_instance_;
    new (ptr) ::floyd::CmdRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::CmdRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_CmdRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsCmdRequest}, {
      &protobuf_floyd_2eproto::scc_info_CmdRequest_RequestVote.base,
      &protobuf_floyd_2eproto::scc_info_CmdRequest_AppendEntries.base,
      &protobuf_floyd_2eproto::scc_info_CmdRequest_ServerStatus.base,
      &protobuf_floyd_2eproto::scc_info_CmdRequest_AddServerRequest.base,
      &protobuf_floyd_2eproto::scc_info_CmdRequest_RemoveServerRequest.base,
      &protobuf_floyd_2eproto::scc_info_CmdRequest_RaftTaskRequest.base,}};

static void InitDefaultsCmdResponse_RequestVoteResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_CmdResponse_RequestVoteResponse_default_instance_;
    new (ptr) ::floyd::CmdResponse_RequestVoteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::CmdResponse_RequestVoteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdResponse_RequestVoteResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdResponse_RequestVoteResponse}, {}};

static void InitDefaultsCmdResponse_AppendEntriesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_CmdResponse_AppendEntriesResponse_default_instance_;
    new (ptr) ::floyd::CmdResponse_AppendEntriesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::CmdResponse_AppendEntriesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdResponse_AppendEntriesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdResponse_AppendEntriesResponse}, {}};

static void InitDefaultsCmdResponse_RaftTaskResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_CmdResponse_RaftTaskResponse_default_instance_;
    new (ptr) ::floyd::CmdResponse_RaftTaskResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::CmdResponse_RaftTaskResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdResponse_RaftTaskResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdResponse_RaftTaskResponse}, {}};

static void InitDefaultsCmdResponse_ServerStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_CmdResponse_ServerStatus_default_instance_;
    new (ptr) ::floyd::CmdResponse_ServerStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::CmdResponse_ServerStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdResponse_ServerStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdResponse_ServerStatus}, {}};

static void InitDefaultsCmdResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_CmdResponse_default_instance_;
    new (ptr) ::floyd::CmdResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::CmdResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_CmdResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsCmdResponse}, {
      &protobuf_floyd_2eproto::scc_info_CmdResponse_RequestVoteResponse.base,
      &protobuf_floyd_2eproto::scc_info_CmdResponse_AppendEntriesResponse.base,
      &protobuf_floyd_2eproto::scc_info_CmdResponse_ServerStatus.base,
      &protobuf_floyd_2eproto::scc_info_Membership.base,
      &protobuf_floyd_2eproto::scc_info_CmdResponse_RaftTaskResponse.base,}};

static void InitDefaultsMembership() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::floyd::_Membership_default_instance_;
    new (ptr) ::floyd::Membership();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::floyd::Membership::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Membership =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMembership}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Entry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdRequest_RequestVote.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdRequest_AppendEntries.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdRequest_AddServerRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdRequest_RemoveServerRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdRequest_ServerStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdRequest_RaftTaskRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdResponse_RequestVoteResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdResponse_AppendEntriesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdResponse_RaftTaskResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdResponse_ServerStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Membership.base);
}

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::Entry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::Entry, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::Entry, optype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::Entry, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::Entry, args_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::Entry, reqid_),
  1,
  3,
  0,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RequestVote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RequestVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RequestVote, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RequestVote, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RequestVote, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RequestVote, last_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RequestVote, last_log_term_),
  1,
  0,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_AppendEntries, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_AppendEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_AppendEntries, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_AppendEntries, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_AppendEntries, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_AppendEntries, prev_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_AppendEntries, prev_log_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_AppendEntries, leader_commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_AppendEntries, entries_),
  1,
  0,
  5,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_AddServerRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_AddServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_AddServerRequest, new_server_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RemoveServerRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RemoveServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RemoveServerRequest, old_server_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_ServerStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_ServerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_ServerStatus, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_ServerStatus, commit_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_ServerStatus, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_ServerStatus, port_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RaftTaskRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RaftTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RaftTaskRequest, args_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest_RaftTaskRequest, reqid_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest, request_vote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest, append_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest, server_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest, add_server_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest, remove_server_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdRequest, raft_task_request_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_RequestVoteResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_RequestVoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_RequestVoteResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_RequestVoteResponse, vote_granted_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_AppendEntriesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_AppendEntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_AppendEntriesResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_AppendEntriesResponse, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_AppendEntriesResponse, last_log_index_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_RaftTaskResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_RaftTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_RaftTaskResponse, value_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_ServerStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_ServerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_ServerStatus, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_ServerStatus, commit_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_ServerStatus, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_ServerStatus, leader_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_ServerStatus, leader_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_ServerStatus, voted_for_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_ServerStatus, voted_for_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_ServerStatus, last_log_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_ServerStatus, last_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse_ServerStatus, last_applied_),
  3,
  4,
  0,
  1,
  5,
  2,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse, request_vote_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse, append_entries_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse, server_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse, all_servers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::CmdResponse, raft_task_response_),
  6,
  7,
  1,
  2,
  0,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::Membership, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::Membership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::floyd::Membership, nodes_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::floyd::Entry)},
  { 15, 25, sizeof(::floyd::CmdRequest_RequestVote)},
  { 30, 42, sizeof(::floyd::CmdRequest_AppendEntries)},
  { 49, 55, sizeof(::floyd::CmdRequest_AddServerRequest)},
  { 56, 62, sizeof(::floyd::CmdRequest_RemoveServerRequest)},
  { 63, 72, sizeof(::floyd::CmdRequest_ServerStatus)},
  { 76, 83, sizeof(::floyd::CmdRequest_RaftTaskRequest)},
  { 85, 97, sizeof(::floyd::CmdRequest)},
  { 104, 111, sizeof(::floyd::CmdResponse_RequestVoteResponse)},
  { 113, 121, sizeof(::floyd::CmdResponse_AppendEntriesResponse)},
  { 124, 130, sizeof(::floyd::CmdResponse_RaftTaskResponse)},
  { 131, 146, sizeof(::floyd::CmdResponse_ServerStatus)},
  { 156, 169, sizeof(::floyd::CmdResponse)},
  { 177, 183, sizeof(::floyd::Membership)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_CmdRequest_RequestVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_CmdRequest_AppendEntries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_CmdRequest_AddServerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_CmdRequest_RemoveServerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_CmdRequest_ServerStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_CmdRequest_RaftTaskRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_CmdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_CmdResponse_RequestVoteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_CmdResponse_AppendEntriesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_CmdResponse_RaftTaskResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_CmdResponse_ServerStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_CmdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::floyd::_Membership_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "floyd.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013floyd.proto\022\005floyd\"\314\001\n\005Entry\022\014\n\004term\030\001"
      " \001(\004\022#\n\006optype\030\002 \002(\0162\023.floyd.Entry.OpTyp"
      "e\022\016\n\006server\030\003 \001(\014\022\014\n\004args\030\004 \003(\014\022\r\n\005reqid"
      "\030\005 \001(\004\"c\n\006OpType\022\016\n\nkUnKnowCmd\020\000\022\016\n\nkAdd"
      "Server\020\001\022\021\n\rkRemoveServer\020\002\022\022\n\016kGetAllSe"
      "rvers\020\003\022\022\n\016kRaftEntryTask\020\004\"\346\006\n\nCmdReque"
      "st\022\031\n\004type\030\001 \002(\0162\013.floyd.Type\0223\n\014request"
      "_vote\030\002 \001(\0132\035.floyd.CmdRequest.RequestVo"
      "te\0227\n\016append_entries\030\003 \001(\0132\037.floyd.CmdRe"
      "quest.AppendEntries\0225\n\rserver_status\030\004 \001"
      "(\0132\036.floyd.CmdRequest.ServerStatus\022>\n\022ad"
      "d_server_request\030\005 \001(\0132\".floyd.CmdReques"
      "t.AddServerRequest\022D\n\025remove_server_requ"
      "est\030\006 \001(\0132%.floyd.CmdRequest.RemoveServe"
      "rRequest\022<\n\021raft_task_request\030\007 \001(\0132!.fl"
      "oyd.CmdRequest.RaftTaskRequest\032d\n\013Reques"
      "tVote\022\014\n\004term\030\001 \002(\004\022\n\n\002ip\030\002 \002(\014\022\014\n\004port\030"
      "\003 \002(\005\022\026\n\016last_log_index\030\004 \002(\004\022\025\n\rlast_lo"
      "g_term\030\005 \002(\004\032\234\001\n\rAppendEntries\022\014\n\004term\030\001"
      " \002(\004\022\n\n\002ip\030\002 \002(\014\022\014\n\004port\030\003 \002(\005\022\026\n\016prev_l"
      "og_index\030\004 \002(\004\022\025\n\rprev_log_term\030\005 \002(\004\022\025\n"
      "\rleader_commit\030\006 \002(\004\022\035\n\007entries\030\007 \003(\0132\014."
      "floyd.Entry\032&\n\020AddServerRequest\022\022\n\nnew_s"
      "erver\030\001 \002(\014\032)\n\023RemoveServerRequest\022\022\n\nol"
      "d_server\030\001 \002(\014\032L\n\014ServerStatus\022\014\n\004term\030\001"
      " \002(\003\022\024\n\014commit_index\030\002 \002(\003\022\n\n\002ip\030\003 \001(\014\022\014"
      "\n\004port\030\004 \001(\005\032.\n\017RaftTaskRequest\022\014\n\004args\030"
      "\001 \003(\014\022\r\n\005reqid\030\002 \002(\004\"\213\006\n\013CmdResponse\022\031\n\004"
      "type\030\001 \002(\0162\013.floyd.Type\022\037\n\004code\030\002 \001(\0162\021."
      "floyd.StatusCode\022@\n\020request_vote_res\030\003 \001"
      "(\0132&.floyd.CmdResponse.RequestVoteRespon"
      "se\022D\n\022append_entries_res\030\004 \001(\0132(.floyd.C"
      "mdResponse.AppendEntriesResponse\022\013\n\003msg\030"
      "\005 \001(\014\0226\n\rserver_status\030\006 \001(\0132\037.floyd.Cmd"
      "Response.ServerStatus\022&\n\013all_servers\030\007 \001"
      "(\0132\021.floyd.Membership\022\?\n\022raft_task_respo"
      "nse\030\010 \001(\0132#.floyd.CmdResponse.RaftTaskRe"
      "sponse\0329\n\023RequestVoteResponse\022\014\n\004term\030\001 "
      "\002(\004\022\024\n\014vote_granted\030\002 \002(\010\032N\n\025AppendEntri"
      "esResponse\022\014\n\004term\030\001 \002(\004\022\017\n\007success\030\002 \002("
      "\010\022\026\n\016last_log_index\030\003 \001(\004\032!\n\020RaftTaskRes"
      "ponse\022\r\n\005value\030\001 \001(\014\032\333\001\n\014ServerStatus\022\014\n"
      "\004term\030\001 \002(\004\022\024\n\014commit_index\030\002 \002(\004\022\014\n\004rol"
      "e\030\003 \002(\014\022\021\n\tleader_ip\030\004 \001(\014\022\023\n\013leader_por"
      "t\030\005 \001(\005\022\024\n\014voted_for_ip\030\006 \001(\014\022\026\n\016voted_f"
      "or_port\030\007 \001(\005\022\025\n\rlast_log_term\030\010 \001(\004\022\026\n\016"
      "last_log_index\030\t \001(\004\022\024\n\014last_applied\030\n \001"
      "(\004\"\033\n\nMembership\022\r\n\005nodes\030\001 \003(\014*\232\001\n\004Type"
      "\022\016\n\nkUnKnowCmd\020\000\022\016\n\nkAddServer\020\001\022\021\n\rkRem"
      "oveServer\020\002\022\022\n\016kGetAllServers\020\003\022\022\n\016kRaft"
      "EntryTask\020\004\022\020\n\014kRequestVote\020\005\022\022\n\016kAppend"
      "Entries\020\006\022\021\n\rkServerStatus\020\007*=\n\nStatusCo"
      "de\022\007\n\003kOk\020\000\022\r\n\tkNotFound\020\001\022\n\n\006kError\020\002\022\013"
      "\n\007kLocked\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2131);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "floyd.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_floyd_2eproto
namespace floyd {
const ::google::protobuf::EnumDescriptor* Entry_OpType_descriptor() {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_floyd_2eproto::file_level_enum_descriptors[0];
}
bool Entry_OpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Entry_OpType Entry::kUnKnowCmd;
const Entry_OpType Entry::kAddServer;
const Entry_OpType Entry::kRemoveServer;
const Entry_OpType Entry::kGetAllServers;
const Entry_OpType Entry::kRaftEntryTask;
const Entry_OpType Entry::OpType_MIN;
const Entry_OpType Entry::OpType_MAX;
const int Entry::OpType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_floyd_2eproto::file_level_enum_descriptors[1];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor() {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_floyd_2eproto::file_level_enum_descriptors[2];
}
bool StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Entry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entry::kTermFieldNumber;
const int Entry::kOptypeFieldNumber;
const int Entry::kServerFieldNumber;
const int Entry::kArgsFieldNumber;
const int Entry::kReqidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entry::Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_Entry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.Entry)
}
Entry::Entry(const Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server()) {
    server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&optype_) -
    reinterpret_cast<char*>(&term_)) + sizeof(optype_));
  // @@protoc_insertion_point(copy_constructor:floyd.Entry)
}

void Entry::SharedCtor() {
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optype_) -
      reinterpret_cast<char*>(&term_)) + sizeof(optype_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:floyd.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Entry& Entry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_Entry.base);
  return *internal_default_instance();
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    server_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optype_) -
        reinterpret_cast<char*>(&term_)) + sizeof(optype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.Entry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .floyd.Entry.OpType optype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::floyd::Entry_OpType_IsValid(value)) {
            set_optype(static_cast< ::floyd::Entry_OpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes server = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes args = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 reqid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_reqid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.Entry)
  return false;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 term = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required .floyd.Entry.OpType optype = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->optype(), output);
  }

  // optional bytes server = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->server(), output);
  }

  // repeated bytes args = 4;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->args(i), output);
  }

  // optional uint64 reqid = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->reqid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.Entry)
}

::google::protobuf::uint8* Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 term = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required .floyd.Entry.OpType optype = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->optype(), target);
  }

  // optional bytes server = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->server(), target);
  }

  // repeated bytes args = 4;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->args(i), target);
  }

  // optional uint64 reqid = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->reqid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .floyd.Entry.OpType optype = 2;
  if (has_optype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->optype());
  }
  // repeated bytes args = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  for (int i = 0, n = this->args_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->args(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes server = 3;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server());
    }

    // optional uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional uint64 reqid = 5;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_server();
      server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
    }
    if (cached_has_bits & 0x00000002u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000004u) {
      reqid_ = from.reqid_;
    }
    if (cached_has_bits & 0x00000008u) {
      optype_ = from.optype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void Entry::Swap(Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry::InternalSwap(Entry* other) {
  using std::swap;
  args_.InternalSwap(CastToBase(&other->args_));
  server_.Swap(&other->server_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(reqid_, other->reqid_);
  swap(optype_, other->optype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdRequest_RequestVote::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRequest_RequestVote::kTermFieldNumber;
const int CmdRequest_RequestVote::kIpFieldNumber;
const int CmdRequest_RequestVote::kPortFieldNumber;
const int CmdRequest_RequestVote::kLastLogIndexFieldNumber;
const int CmdRequest_RequestVote::kLastLogTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRequest_RequestVote::CmdRequest_RequestVote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_CmdRequest_RequestVote.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdRequest.RequestVote)
}
CmdRequest_RequestVote::CmdRequest_RequestVote(const CmdRequest_RequestVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&term_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:floyd.CmdRequest.RequestVote)
}

void CmdRequest_RequestVote::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&term_)) + sizeof(port_));
}

CmdRequest_RequestVote::~CmdRequest_RequestVote() {
  // @@protoc_insertion_point(destructor:floyd.CmdRequest.RequestVote)
  SharedDtor();
}

void CmdRequest_RequestVote::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdRequest_RequestVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdRequest_RequestVote::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdRequest_RequestVote& CmdRequest_RequestVote::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_CmdRequest_RequestVote.base);
  return *internal_default_instance();
}


void CmdRequest_RequestVote::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdRequest.RequestVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&port_) -
        reinterpret_cast<char*>(&term_)) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdRequest_RequestVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdRequest.RequestVote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 last_log_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_last_log_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 last_log_term = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_last_log_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdRequest.RequestVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdRequest.RequestVote)
  return false;
#undef DO_
}

void CmdRequest_RequestVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdRequest.RequestVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bytes ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ip(), output);
  }

  // required int32 port = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // required uint64 last_log_index = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_log_index(), output);
  }

  // required uint64 last_log_term = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_log_term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdRequest.RequestVote)
}

::google::protobuf::uint8* CmdRequest_RequestVote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdRequest.RequestVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bytes ip = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // required int32 port = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // required uint64 last_log_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_log_index(), target);
  }

  // required uint64 last_log_term = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_log_term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdRequest.RequestVote)
  return target;
}

size_t CmdRequest_RequestVote::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:floyd.CmdRequest.RequestVote)
  size_t total_size = 0;

  if (has_ip()) {
    // required bytes ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  if (has_term()) {
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  if (has_last_log_index()) {
    // required uint64 last_log_index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_log_index());
  }

  if (has_last_log_term()) {
    // required uint64 last_log_term = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_log_term());
  }

  if (has_port()) {
    // required int32 port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t CmdRequest_RequestVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdRequest.RequestVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());

    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());

    // required uint64 last_log_index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_log_index());

    // required uint64 last_log_term = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_log_term());

    // required int32 port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdRequest_RequestVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdRequest.RequestVote)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdRequest_RequestVote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRequest_RequestVote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdRequest.RequestVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdRequest.RequestVote)
    MergeFrom(*source);
  }
}

void CmdRequest_RequestVote::MergeFrom(const CmdRequest_RequestVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdRequest.RequestVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_log_index_ = from.last_log_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_log_term_ = from.last_log_term_;
    }
    if (cached_has_bits & 0x00000010u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CmdRequest_RequestVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdRequest.RequestVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest_RequestVote::CopyFrom(const CmdRequest_RequestVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdRequest.RequestVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest_RequestVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void CmdRequest_RequestVote::Swap(CmdRequest_RequestVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRequest_RequestVote::InternalSwap(CmdRequest_RequestVote* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(last_log_index_, other->last_log_index_);
  swap(last_log_term_, other->last_log_term_);
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdRequest_RequestVote::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdRequest_AppendEntries::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRequest_AppendEntries::kTermFieldNumber;
const int CmdRequest_AppendEntries::kIpFieldNumber;
const int CmdRequest_AppendEntries::kPortFieldNumber;
const int CmdRequest_AppendEntries::kPrevLogIndexFieldNumber;
const int CmdRequest_AppendEntries::kPrevLogTermFieldNumber;
const int CmdRequest_AppendEntries::kLeaderCommitFieldNumber;
const int CmdRequest_AppendEntries::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRequest_AppendEntries::CmdRequest_AppendEntries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_CmdRequest_AppendEntries.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdRequest.AppendEntries)
}
CmdRequest_AppendEntries::CmdRequest_AppendEntries(const CmdRequest_AppendEntries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&term_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:floyd.CmdRequest.AppendEntries)
}

void CmdRequest_AppendEntries::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&term_)) + sizeof(port_));
}

CmdRequest_AppendEntries::~CmdRequest_AppendEntries() {
  // @@protoc_insertion_point(destructor:floyd.CmdRequest.AppendEntries)
  SharedDtor();
}

void CmdRequest_AppendEntries::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdRequest_AppendEntries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdRequest_AppendEntries::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdRequest_AppendEntries& CmdRequest_AppendEntries::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_CmdRequest_AppendEntries.base);
  return *internal_default_instance();
}


void CmdRequest_AppendEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdRequest.AppendEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&port_) -
        reinterpret_cast<char*>(&term_)) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdRequest_AppendEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdRequest.AppendEntries)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 prev_log_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_prev_log_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 prev_log_term = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_prev_log_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 leader_commit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_leader_commit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .floyd.Entry entries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdRequest.AppendEntries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdRequest.AppendEntries)
  return false;
#undef DO_
}

void CmdRequest_AppendEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdRequest.AppendEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bytes ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ip(), output);
  }

  // required int32 port = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // required uint64 prev_log_index = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->prev_log_index(), output);
  }

  // required uint64 prev_log_term = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->prev_log_term(), output);
  }

  // required uint64 leader_commit = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->leader_commit(), output);
  }

  // repeated .floyd.Entry entries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdRequest.AppendEntries)
}

::google::protobuf::uint8* CmdRequest_AppendEntries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdRequest.AppendEntries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bytes ip = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // required int32 port = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // required uint64 prev_log_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->prev_log_index(), target);
  }

  // required uint64 prev_log_term = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->prev_log_term(), target);
  }

  // required uint64 leader_commit = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->leader_commit(), target);
  }

  // repeated .floyd.Entry entries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->entries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdRequest.AppendEntries)
  return target;
}

size_t CmdRequest_AppendEntries::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:floyd.CmdRequest.AppendEntries)
  size_t total_size = 0;

  if (has_ip()) {
    // required bytes ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  if (has_term()) {
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  if (has_prev_log_index()) {
    // required uint64 prev_log_index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prev_log_index());
  }

  if (has_prev_log_term()) {
    // required uint64 prev_log_term = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prev_log_term());
  }

  if (has_leader_commit()) {
    // required uint64 leader_commit = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader_commit());
  }

  if (has_port()) {
    // required int32 port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t CmdRequest_AppendEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdRequest.AppendEntries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());

    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());

    // required uint64 prev_log_index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prev_log_index());

    // required uint64 prev_log_term = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prev_log_term());

    // required uint64 leader_commit = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader_commit());

    // required int32 port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .floyd.Entry entries = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdRequest_AppendEntries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdRequest.AppendEntries)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdRequest_AppendEntries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRequest_AppendEntries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdRequest.AppendEntries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdRequest.AppendEntries)
    MergeFrom(*source);
  }
}

void CmdRequest_AppendEntries::MergeFrom(const CmdRequest_AppendEntries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdRequest.AppendEntries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000004u) {
      prev_log_index_ = from.prev_log_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      prev_log_term_ = from.prev_log_term_;
    }
    if (cached_has_bits & 0x00000010u) {
      leader_commit_ = from.leader_commit_;
    }
    if (cached_has_bits & 0x00000020u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CmdRequest_AppendEntries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdRequest.AppendEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest_AppendEntries::CopyFrom(const CmdRequest_AppendEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdRequest.AppendEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest_AppendEntries::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void CmdRequest_AppendEntries::Swap(CmdRequest_AppendEntries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRequest_AppendEntries::InternalSwap(CmdRequest_AppendEntries* other) {
  using std::swap;
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(prev_log_index_, other->prev_log_index_);
  swap(prev_log_term_, other->prev_log_term_);
  swap(leader_commit_, other->leader_commit_);
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdRequest_AppendEntries::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdRequest_AddServerRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRequest_AddServerRequest::kNewServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRequest_AddServerRequest::CmdRequest_AddServerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_CmdRequest_AddServerRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdRequest.AddServerRequest)
}
CmdRequest_AddServerRequest::CmdRequest_AddServerRequest(const CmdRequest_AddServerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_server()) {
    new_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_server_);
  }
  // @@protoc_insertion_point(copy_constructor:floyd.CmdRequest.AddServerRequest)
}

void CmdRequest_AddServerRequest::SharedCtor() {
  new_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CmdRequest_AddServerRequest::~CmdRequest_AddServerRequest() {
  // @@protoc_insertion_point(destructor:floyd.CmdRequest.AddServerRequest)
  SharedDtor();
}

void CmdRequest_AddServerRequest::SharedDtor() {
  new_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdRequest_AddServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdRequest_AddServerRequest::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdRequest_AddServerRequest& CmdRequest_AddServerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_CmdRequest_AddServerRequest.base);
  return *internal_default_instance();
}


void CmdRequest_AddServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdRequest.AddServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    new_server_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdRequest_AddServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdRequest.AddServerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes new_server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdRequest.AddServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdRequest.AddServerRequest)
  return false;
#undef DO_
}

void CmdRequest_AddServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdRequest.AddServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes new_server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->new_server(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdRequest.AddServerRequest)
}

::google::protobuf::uint8* CmdRequest_AddServerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdRequest.AddServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes new_server = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->new_server(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdRequest.AddServerRequest)
  return target;
}

size_t CmdRequest_AddServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdRequest.AddServerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes new_server = 1;
  if (has_new_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->new_server());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdRequest_AddServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdRequest.AddServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdRequest_AddServerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRequest_AddServerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdRequest.AddServerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdRequest.AddServerRequest)
    MergeFrom(*source);
  }
}

void CmdRequest_AddServerRequest::MergeFrom(const CmdRequest_AddServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdRequest.AddServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_new_server()) {
    set_has_new_server();
    new_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_server_);
  }
}

void CmdRequest_AddServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdRequest.AddServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest_AddServerRequest::CopyFrom(const CmdRequest_AddServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdRequest.AddServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest_AddServerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CmdRequest_AddServerRequest::Swap(CmdRequest_AddServerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRequest_AddServerRequest::InternalSwap(CmdRequest_AddServerRequest* other) {
  using std::swap;
  new_server_.Swap(&other->new_server_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdRequest_AddServerRequest::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdRequest_RemoveServerRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRequest_RemoveServerRequest::kOldServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRequest_RemoveServerRequest::CmdRequest_RemoveServerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_CmdRequest_RemoveServerRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdRequest.RemoveServerRequest)
}
CmdRequest_RemoveServerRequest::CmdRequest_RemoveServerRequest(const CmdRequest_RemoveServerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  old_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_old_server()) {
    old_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_server_);
  }
  // @@protoc_insertion_point(copy_constructor:floyd.CmdRequest.RemoveServerRequest)
}

void CmdRequest_RemoveServerRequest::SharedCtor() {
  old_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CmdRequest_RemoveServerRequest::~CmdRequest_RemoveServerRequest() {
  // @@protoc_insertion_point(destructor:floyd.CmdRequest.RemoveServerRequest)
  SharedDtor();
}

void CmdRequest_RemoveServerRequest::SharedDtor() {
  old_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdRequest_RemoveServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdRequest_RemoveServerRequest::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdRequest_RemoveServerRequest& CmdRequest_RemoveServerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_CmdRequest_RemoveServerRequest.base);
  return *internal_default_instance();
}


void CmdRequest_RemoveServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdRequest.RemoveServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    old_server_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdRequest_RemoveServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdRequest.RemoveServerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes old_server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_old_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdRequest.RemoveServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdRequest.RemoveServerRequest)
  return false;
#undef DO_
}

void CmdRequest_RemoveServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdRequest.RemoveServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes old_server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->old_server(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdRequest.RemoveServerRequest)
}

::google::protobuf::uint8* CmdRequest_RemoveServerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdRequest.RemoveServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes old_server = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->old_server(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdRequest.RemoveServerRequest)
  return target;
}

size_t CmdRequest_RemoveServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdRequest.RemoveServerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes old_server = 1;
  if (has_old_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->old_server());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdRequest_RemoveServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdRequest.RemoveServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdRequest_RemoveServerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRequest_RemoveServerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdRequest.RemoveServerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdRequest.RemoveServerRequest)
    MergeFrom(*source);
  }
}

void CmdRequest_RemoveServerRequest::MergeFrom(const CmdRequest_RemoveServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdRequest.RemoveServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_old_server()) {
    set_has_old_server();
    old_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_server_);
  }
}

void CmdRequest_RemoveServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdRequest.RemoveServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest_RemoveServerRequest::CopyFrom(const CmdRequest_RemoveServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdRequest.RemoveServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest_RemoveServerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CmdRequest_RemoveServerRequest::Swap(CmdRequest_RemoveServerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRequest_RemoveServerRequest::InternalSwap(CmdRequest_RemoveServerRequest* other) {
  using std::swap;
  old_server_.Swap(&other->old_server_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdRequest_RemoveServerRequest::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdRequest_ServerStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRequest_ServerStatus::kTermFieldNumber;
const int CmdRequest_ServerStatus::kCommitIndexFieldNumber;
const int CmdRequest_ServerStatus::kIpFieldNumber;
const int CmdRequest_ServerStatus::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRequest_ServerStatus::CmdRequest_ServerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_CmdRequest_ServerStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdRequest.ServerStatus)
}
CmdRequest_ServerStatus::CmdRequest_ServerStatus(const CmdRequest_ServerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&term_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:floyd.CmdRequest.ServerStatus)
}

void CmdRequest_ServerStatus::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&term_)) + sizeof(port_));
}

CmdRequest_ServerStatus::~CmdRequest_ServerStatus() {
  // @@protoc_insertion_point(destructor:floyd.CmdRequest.ServerStatus)
  SharedDtor();
}

void CmdRequest_ServerStatus::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdRequest_ServerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdRequest_ServerStatus::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdRequest_ServerStatus& CmdRequest_ServerStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_CmdRequest_ServerStatus.base);
  return *internal_default_instance();
}


void CmdRequest_ServerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdRequest.ServerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&port_) -
        reinterpret_cast<char*>(&term_)) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdRequest_ServerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdRequest.ServerStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 commit_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_commit_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &commit_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdRequest.ServerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdRequest.ServerStatus)
  return false;
#undef DO_
}

void CmdRequest_ServerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdRequest.ServerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // required int64 commit_index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->commit_index(), output);
  }

  // optional bytes ip = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ip(), output);
  }

  // optional int32 port = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdRequest.ServerStatus)
}

::google::protobuf::uint8* CmdRequest_ServerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdRequest.ServerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 term = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // required int64 commit_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->commit_index(), target);
  }

  // optional bytes ip = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdRequest.ServerStatus)
  return target;
}

size_t CmdRequest_ServerStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:floyd.CmdRequest.ServerStatus)
  size_t total_size = 0;

  if (has_term()) {
    // required int64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());
  }

  if (has_commit_index()) {
    // required int64 commit_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->commit_index());
  }

  return total_size;
}
size_t CmdRequest_ServerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdRequest.ServerStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->term());

    // required int64 commit_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->commit_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes ip = 3;
  if (has_ip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  // optional int32 port = 4;
  if (has_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdRequest_ServerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdRequest.ServerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdRequest_ServerStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRequest_ServerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdRequest.ServerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdRequest.ServerStatus)
    MergeFrom(*source);
  }
}

void CmdRequest_ServerStatus::MergeFrom(const CmdRequest_ServerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdRequest.ServerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000004u) {
      commit_index_ = from.commit_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CmdRequest_ServerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdRequest.ServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest_ServerStatus::CopyFrom(const CmdRequest_ServerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdRequest.ServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest_ServerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void CmdRequest_ServerStatus::Swap(CmdRequest_ServerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRequest_ServerStatus::InternalSwap(CmdRequest_ServerStatus* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(commit_index_, other->commit_index_);
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdRequest_ServerStatus::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdRequest_RaftTaskRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRequest_RaftTaskRequest::kArgsFieldNumber;
const int CmdRequest_RaftTaskRequest::kReqidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRequest_RaftTaskRequest::CmdRequest_RaftTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_CmdRequest_RaftTaskRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdRequest.RaftTaskRequest)
}
CmdRequest_RaftTaskRequest::CmdRequest_RaftTaskRequest(const CmdRequest_RaftTaskRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reqid_ = from.reqid_;
  // @@protoc_insertion_point(copy_constructor:floyd.CmdRequest.RaftTaskRequest)
}

void CmdRequest_RaftTaskRequest::SharedCtor() {
  reqid_ = GOOGLE_ULONGLONG(0);
}

CmdRequest_RaftTaskRequest::~CmdRequest_RaftTaskRequest() {
  // @@protoc_insertion_point(destructor:floyd.CmdRequest.RaftTaskRequest)
  SharedDtor();
}

void CmdRequest_RaftTaskRequest::SharedDtor() {
}

void CmdRequest_RaftTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdRequest_RaftTaskRequest::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdRequest_RaftTaskRequest& CmdRequest_RaftTaskRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_CmdRequest_RaftTaskRequest.base);
  return *internal_default_instance();
}


void CmdRequest_RaftTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdRequest.RaftTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  reqid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdRequest_RaftTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdRequest.RaftTaskRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes args = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 reqid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_reqid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdRequest.RaftTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdRequest.RaftTaskRequest)
  return false;
#undef DO_
}

void CmdRequest_RaftTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdRequest.RaftTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes args = 1;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->args(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required uint64 reqid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->reqid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdRequest.RaftTaskRequest)
}

::google::protobuf::uint8* CmdRequest_RaftTaskRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdRequest.RaftTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes args = 1;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->args(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required uint64 reqid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->reqid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdRequest.RaftTaskRequest)
  return target;
}

size_t CmdRequest_RaftTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdRequest.RaftTaskRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 reqid = 2;
  if (has_reqid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reqid());
  }
  // repeated bytes args = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  for (int i = 0, n = this->args_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->args(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdRequest_RaftTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdRequest.RaftTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdRequest_RaftTaskRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRequest_RaftTaskRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdRequest.RaftTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdRequest.RaftTaskRequest)
    MergeFrom(*source);
  }
}

void CmdRequest_RaftTaskRequest::MergeFrom(const CmdRequest_RaftTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdRequest.RaftTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (from.has_reqid()) {
    set_reqid(from.reqid());
  }
}

void CmdRequest_RaftTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdRequest.RaftTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest_RaftTaskRequest::CopyFrom(const CmdRequest_RaftTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdRequest.RaftTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest_RaftTaskRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CmdRequest_RaftTaskRequest::Swap(CmdRequest_RaftTaskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRequest_RaftTaskRequest::InternalSwap(CmdRequest_RaftTaskRequest* other) {
  using std::swap;
  args_.InternalSwap(CastToBase(&other->args_));
  swap(reqid_, other->reqid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdRequest_RaftTaskRequest::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdRequest::InitAsDefaultInstance() {
  ::floyd::_CmdRequest_default_instance_._instance.get_mutable()->request_vote_ = const_cast< ::floyd::CmdRequest_RequestVote*>(
      ::floyd::CmdRequest_RequestVote::internal_default_instance());
  ::floyd::_CmdRequest_default_instance_._instance.get_mutable()->append_entries_ = const_cast< ::floyd::CmdRequest_AppendEntries*>(
      ::floyd::CmdRequest_AppendEntries::internal_default_instance());
  ::floyd::_CmdRequest_default_instance_._instance.get_mutable()->server_status_ = const_cast< ::floyd::CmdRequest_ServerStatus*>(
      ::floyd::CmdRequest_ServerStatus::internal_default_instance());
  ::floyd::_CmdRequest_default_instance_._instance.get_mutable()->add_server_request_ = const_cast< ::floyd::CmdRequest_AddServerRequest*>(
      ::floyd::CmdRequest_AddServerRequest::internal_default_instance());
  ::floyd::_CmdRequest_default_instance_._instance.get_mutable()->remove_server_request_ = const_cast< ::floyd::CmdRequest_RemoveServerRequest*>(
      ::floyd::CmdRequest_RemoveServerRequest::internal_default_instance());
  ::floyd::_CmdRequest_default_instance_._instance.get_mutable()->raft_task_request_ = const_cast< ::floyd::CmdRequest_RaftTaskRequest*>(
      ::floyd::CmdRequest_RaftTaskRequest::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdRequest::kTypeFieldNumber;
const int CmdRequest::kRequestVoteFieldNumber;
const int CmdRequest::kAppendEntriesFieldNumber;
const int CmdRequest::kServerStatusFieldNumber;
const int CmdRequest::kAddServerRequestFieldNumber;
const int CmdRequest::kRemoveServerRequestFieldNumber;
const int CmdRequest::kRaftTaskRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdRequest::CmdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_CmdRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdRequest)
}
CmdRequest::CmdRequest(const CmdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request_vote()) {
    request_vote_ = new ::floyd::CmdRequest_RequestVote(*from.request_vote_);
  } else {
    request_vote_ = NULL;
  }
  if (from.has_append_entries()) {
    append_entries_ = new ::floyd::CmdRequest_AppendEntries(*from.append_entries_);
  } else {
    append_entries_ = NULL;
  }
  if (from.has_server_status()) {
    server_status_ = new ::floyd::CmdRequest_ServerStatus(*from.server_status_);
  } else {
    server_status_ = NULL;
  }
  if (from.has_add_server_request()) {
    add_server_request_ = new ::floyd::CmdRequest_AddServerRequest(*from.add_server_request_);
  } else {
    add_server_request_ = NULL;
  }
  if (from.has_remove_server_request()) {
    remove_server_request_ = new ::floyd::CmdRequest_RemoveServerRequest(*from.remove_server_request_);
  } else {
    remove_server_request_ = NULL;
  }
  if (from.has_raft_task_request()) {
    raft_task_request_ = new ::floyd::CmdRequest_RaftTaskRequest(*from.raft_task_request_);
  } else {
    raft_task_request_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:floyd.CmdRequest)
}

void CmdRequest::SharedCtor() {
  ::memset(&request_vote_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&request_vote_)) + sizeof(type_));
}

CmdRequest::~CmdRequest() {
  // @@protoc_insertion_point(destructor:floyd.CmdRequest)
  SharedDtor();
}

void CmdRequest::SharedDtor() {
  if (this != internal_default_instance()) delete request_vote_;
  if (this != internal_default_instance()) delete append_entries_;
  if (this != internal_default_instance()) delete server_status_;
  if (this != internal_default_instance()) delete add_server_request_;
  if (this != internal_default_instance()) delete remove_server_request_;
  if (this != internal_default_instance()) delete raft_task_request_;
}

void CmdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdRequest::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdRequest& CmdRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_CmdRequest.base);
  return *internal_default_instance();
}


void CmdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(request_vote_ != NULL);
      request_vote_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(append_entries_ != NULL);
      append_entries_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(server_status_ != NULL);
      server_status_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(add_server_request_ != NULL);
      add_server_request_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(remove_server_request_ != NULL);
      remove_server_request_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(raft_task_request_ != NULL);
      raft_task_request_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .floyd.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::floyd::Type_IsValid(value)) {
            set_type(static_cast< ::floyd::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .floyd.CmdRequest.RequestVote request_vote = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_vote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .floyd.CmdRequest.AppendEntries append_entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_append_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .floyd.CmdRequest.ServerStatus server_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .floyd.CmdRequest.AddServerRequest add_server_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_server_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .floyd.CmdRequest.RemoveServerRequest remove_server_request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remove_server_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .floyd.CmdRequest.RaftTaskRequest raft_task_request = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raft_task_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdRequest)
  return false;
#undef DO_
}

void CmdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .floyd.Type type = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .floyd.CmdRequest.RequestVote request_vote = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_request_vote(), output);
  }

  // optional .floyd.CmdRequest.AppendEntries append_entries = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_append_entries(), output);
  }

  // optional .floyd.CmdRequest.ServerStatus server_status = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_server_status(), output);
  }

  // optional .floyd.CmdRequest.AddServerRequest add_server_request = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_add_server_request(), output);
  }

  // optional .floyd.CmdRequest.RemoveServerRequest remove_server_request = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_remove_server_request(), output);
  }

  // optional .floyd.CmdRequest.RaftTaskRequest raft_task_request = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_raft_task_request(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdRequest)
}

::google::protobuf::uint8* CmdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .floyd.Type type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .floyd.CmdRequest.RequestVote request_vote = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_request_vote(), deterministic, target);
  }

  // optional .floyd.CmdRequest.AppendEntries append_entries = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_append_entries(), deterministic, target);
  }

  // optional .floyd.CmdRequest.ServerStatus server_status = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_server_status(), deterministic, target);
  }

  // optional .floyd.CmdRequest.AddServerRequest add_server_request = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_add_server_request(), deterministic, target);
  }

  // optional .floyd.CmdRequest.RemoveServerRequest remove_server_request = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_remove_server_request(), deterministic, target);
  }

  // optional .floyd.CmdRequest.RaftTaskRequest raft_task_request = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_raft_task_request(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdRequest)
  return target;
}

size_t CmdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .floyd.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .floyd.CmdRequest.RequestVote request_vote = 2;
    if (has_request_vote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_vote_);
    }

    // optional .floyd.CmdRequest.AppendEntries append_entries = 3;
    if (has_append_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *append_entries_);
    }

    // optional .floyd.CmdRequest.ServerStatus server_status = 4;
    if (has_server_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_status_);
    }

    // optional .floyd.CmdRequest.AddServerRequest add_server_request = 5;
    if (has_add_server_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *add_server_request_);
    }

    // optional .floyd.CmdRequest.RemoveServerRequest remove_server_request = 6;
    if (has_remove_server_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *remove_server_request_);
    }

    // optional .floyd.CmdRequest.RaftTaskRequest raft_task_request = 7;
    if (has_raft_task_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *raft_task_request_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdRequest)
    MergeFrom(*source);
  }
}

void CmdRequest::MergeFrom(const CmdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_request_vote()->::floyd::CmdRequest_RequestVote::MergeFrom(from.request_vote());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_append_entries()->::floyd::CmdRequest_AppendEntries::MergeFrom(from.append_entries());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_server_status()->::floyd::CmdRequest_ServerStatus::MergeFrom(from.server_status());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_add_server_request()->::floyd::CmdRequest_AddServerRequest::MergeFrom(from.add_server_request());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_remove_server_request()->::floyd::CmdRequest_RemoveServerRequest::MergeFrom(from.remove_server_request());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_raft_task_request()->::floyd::CmdRequest_RaftTaskRequest::MergeFrom(from.raft_task_request());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CmdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest::CopyFrom(const CmdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  if (has_request_vote()) {
    if (!this->request_vote_->IsInitialized()) return false;
  }
  if (has_append_entries()) {
    if (!this->append_entries_->IsInitialized()) return false;
  }
  if (has_server_status()) {
    if (!this->server_status_->IsInitialized()) return false;
  }
  if (has_add_server_request()) {
    if (!this->add_server_request_->IsInitialized()) return false;
  }
  if (has_remove_server_request()) {
    if (!this->remove_server_request_->IsInitialized()) return false;
  }
  if (has_raft_task_request()) {
    if (!this->raft_task_request_->IsInitialized()) return false;
  }
  return true;
}

void CmdRequest::Swap(CmdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdRequest::InternalSwap(CmdRequest* other) {
  using std::swap;
  swap(request_vote_, other->request_vote_);
  swap(append_entries_, other->append_entries_);
  swap(server_status_, other->server_status_);
  swap(add_server_request_, other->add_server_request_);
  swap(remove_server_request_, other->remove_server_request_);
  swap(raft_task_request_, other->raft_task_request_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdRequest::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdResponse_RequestVoteResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdResponse_RequestVoteResponse::kTermFieldNumber;
const int CmdResponse_RequestVoteResponse::kVoteGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResponse_RequestVoteResponse::CmdResponse_RequestVoteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_CmdResponse_RequestVoteResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdResponse.RequestVoteResponse)
}
CmdResponse_RequestVoteResponse::CmdResponse_RequestVoteResponse(const CmdResponse_RequestVoteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_granted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(vote_granted_));
  // @@protoc_insertion_point(copy_constructor:floyd.CmdResponse.RequestVoteResponse)
}

void CmdResponse_RequestVoteResponse::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vote_granted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(vote_granted_));
}

CmdResponse_RequestVoteResponse::~CmdResponse_RequestVoteResponse() {
  // @@protoc_insertion_point(destructor:floyd.CmdResponse.RequestVoteResponse)
  SharedDtor();
}

void CmdResponse_RequestVoteResponse::SharedDtor() {
}

void CmdResponse_RequestVoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdResponse_RequestVoteResponse::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdResponse_RequestVoteResponse& CmdResponse_RequestVoteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_CmdResponse_RequestVoteResponse.base);
  return *internal_default_instance();
}


void CmdResponse_RequestVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdResponse.RequestVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vote_granted_) -
        reinterpret_cast<char*>(&term_)) + sizeof(vote_granted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdResponse_RequestVoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdResponse.RequestVoteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool vote_granted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_vote_granted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdResponse.RequestVoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdResponse.RequestVoteResponse)
  return false;
#undef DO_
}

void CmdResponse_RequestVoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdResponse.RequestVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bool vote_granted = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->vote_granted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdResponse.RequestVoteResponse)
}

::google::protobuf::uint8* CmdResponse_RequestVoteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdResponse.RequestVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bool vote_granted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->vote_granted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdResponse.RequestVoteResponse)
  return target;
}

size_t CmdResponse_RequestVoteResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:floyd.CmdResponse.RequestVoteResponse)
  size_t total_size = 0;

  if (has_term()) {
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  if (has_vote_granted()) {
    // required bool vote_granted = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CmdResponse_RequestVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdResponse.RequestVoteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());

    // required bool vote_granted = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdResponse_RequestVoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdResponse.RequestVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdResponse_RequestVoteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResponse_RequestVoteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdResponse.RequestVoteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdResponse.RequestVoteResponse)
    MergeFrom(*source);
  }
}

void CmdResponse_RequestVoteResponse::MergeFrom(const CmdResponse_RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdResponse.RequestVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      vote_granted_ = from.vote_granted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CmdResponse_RequestVoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdResponse.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_RequestVoteResponse::CopyFrom(const CmdResponse_RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdResponse.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_RequestVoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CmdResponse_RequestVoteResponse::Swap(CmdResponse_RequestVoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResponse_RequestVoteResponse::InternalSwap(CmdResponse_RequestVoteResponse* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(vote_granted_, other->vote_granted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdResponse_RequestVoteResponse::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdResponse_AppendEntriesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdResponse_AppendEntriesResponse::kTermFieldNumber;
const int CmdResponse_AppendEntriesResponse::kSuccessFieldNumber;
const int CmdResponse_AppendEntriesResponse::kLastLogIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResponse_AppendEntriesResponse::CmdResponse_AppendEntriesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_CmdResponse_AppendEntriesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdResponse.AppendEntriesResponse)
}
CmdResponse_AppendEntriesResponse::CmdResponse_AppendEntriesResponse(const CmdResponse_AppendEntriesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:floyd.CmdResponse.AppendEntriesResponse)
}

void CmdResponse_AppendEntriesResponse::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&term_)) + sizeof(success_));
}

CmdResponse_AppendEntriesResponse::~CmdResponse_AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:floyd.CmdResponse.AppendEntriesResponse)
  SharedDtor();
}

void CmdResponse_AppendEntriesResponse::SharedDtor() {
}

void CmdResponse_AppendEntriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdResponse_AppendEntriesResponse::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdResponse_AppendEntriesResponse& CmdResponse_AppendEntriesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_CmdResponse_AppendEntriesResponse.base);
  return *internal_default_instance();
}


void CmdResponse_AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdResponse.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&term_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdResponse_AppendEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdResponse.AppendEntriesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_log_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_log_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdResponse.AppendEntriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdResponse.AppendEntriesResponse)
  return false;
#undef DO_
}

void CmdResponse_AppendEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdResponse.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bool success = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional uint64 last_log_index = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_log_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdResponse.AppendEntriesResponse)
}

::google::protobuf::uint8* CmdResponse_AppendEntriesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdResponse.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bool success = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional uint64 last_log_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_log_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdResponse.AppendEntriesResponse)
  return target;
}

size_t CmdResponse_AppendEntriesResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:floyd.CmdResponse.AppendEntriesResponse)
  size_t total_size = 0;

  if (has_term()) {
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  if (has_success()) {
    // required bool success = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CmdResponse_AppendEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdResponse.AppendEntriesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());

    // required bool success = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 last_log_index = 3;
  if (has_last_log_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_log_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdResponse_AppendEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdResponse.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdResponse_AppendEntriesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResponse_AppendEntriesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdResponse.AppendEntriesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdResponse.AppendEntriesResponse)
    MergeFrom(*source);
  }
}

void CmdResponse_AppendEntriesResponse::MergeFrom(const CmdResponse_AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdResponse.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_log_index_ = from.last_log_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CmdResponse_AppendEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdResponse.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_AppendEntriesResponse::CopyFrom(const CmdResponse_AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdResponse.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_AppendEntriesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void CmdResponse_AppendEntriesResponse::Swap(CmdResponse_AppendEntriesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResponse_AppendEntriesResponse::InternalSwap(CmdResponse_AppendEntriesResponse* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(last_log_index_, other->last_log_index_);
  swap(success_, other->success_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdResponse_AppendEntriesResponse::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdResponse_RaftTaskResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdResponse_RaftTaskResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResponse_RaftTaskResponse::CmdResponse_RaftTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_CmdResponse_RaftTaskResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdResponse.RaftTaskResponse)
}
CmdResponse_RaftTaskResponse::CmdResponse_RaftTaskResponse(const CmdResponse_RaftTaskResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:floyd.CmdResponse.RaftTaskResponse)
}

void CmdResponse_RaftTaskResponse::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CmdResponse_RaftTaskResponse::~CmdResponse_RaftTaskResponse() {
  // @@protoc_insertion_point(destructor:floyd.CmdResponse.RaftTaskResponse)
  SharedDtor();
}

void CmdResponse_RaftTaskResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdResponse_RaftTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdResponse_RaftTaskResponse::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdResponse_RaftTaskResponse& CmdResponse_RaftTaskResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_CmdResponse_RaftTaskResponse.base);
  return *internal_default_instance();
}


void CmdResponse_RaftTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdResponse.RaftTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdResponse_RaftTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdResponse.RaftTaskResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdResponse.RaftTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdResponse.RaftTaskResponse)
  return false;
#undef DO_
}

void CmdResponse_RaftTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdResponse.RaftTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdResponse.RaftTaskResponse)
}

::google::protobuf::uint8* CmdResponse_RaftTaskResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdResponse.RaftTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdResponse.RaftTaskResponse)
  return target;
}

size_t CmdResponse_RaftTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdResponse.RaftTaskResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdResponse_RaftTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdResponse.RaftTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdResponse_RaftTaskResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResponse_RaftTaskResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdResponse.RaftTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdResponse.RaftTaskResponse)
    MergeFrom(*source);
  }
}

void CmdResponse_RaftTaskResponse::MergeFrom(const CmdResponse_RaftTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdResponse.RaftTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    set_has_value();
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void CmdResponse_RaftTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdResponse.RaftTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_RaftTaskResponse::CopyFrom(const CmdResponse_RaftTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdResponse.RaftTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_RaftTaskResponse::IsInitialized() const {
  return true;
}

void CmdResponse_RaftTaskResponse::Swap(CmdResponse_RaftTaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResponse_RaftTaskResponse::InternalSwap(CmdResponse_RaftTaskResponse* other) {
  using std::swap;
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdResponse_RaftTaskResponse::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdResponse_ServerStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdResponse_ServerStatus::kTermFieldNumber;
const int CmdResponse_ServerStatus::kCommitIndexFieldNumber;
const int CmdResponse_ServerStatus::kRoleFieldNumber;
const int CmdResponse_ServerStatus::kLeaderIpFieldNumber;
const int CmdResponse_ServerStatus::kLeaderPortFieldNumber;
const int CmdResponse_ServerStatus::kVotedForIpFieldNumber;
const int CmdResponse_ServerStatus::kVotedForPortFieldNumber;
const int CmdResponse_ServerStatus::kLastLogTermFieldNumber;
const int CmdResponse_ServerStatus::kLastLogIndexFieldNumber;
const int CmdResponse_ServerStatus::kLastAppliedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResponse_ServerStatus::CmdResponse_ServerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_CmdResponse_ServerStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdResponse.ServerStatus)
}
CmdResponse_ServerStatus::CmdResponse_ServerStatus(const CmdResponse_ServerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_role()) {
    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  leader_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leader_ip()) {
    leader_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_ip_);
  }
  voted_for_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_voted_for_ip()) {
    voted_for_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voted_for_ip_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_applied_) -
    reinterpret_cast<char*>(&term_)) + sizeof(last_applied_));
  // @@protoc_insertion_point(copy_constructor:floyd.CmdResponse.ServerStatus)
}

void CmdResponse_ServerStatus::SharedCtor() {
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voted_for_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_applied_) -
      reinterpret_cast<char*>(&term_)) + sizeof(last_applied_));
}

CmdResponse_ServerStatus::~CmdResponse_ServerStatus() {
  // @@protoc_insertion_point(destructor:floyd.CmdResponse.ServerStatus)
  SharedDtor();
}

void CmdResponse_ServerStatus::SharedDtor() {
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voted_for_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CmdResponse_ServerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdResponse_ServerStatus::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdResponse_ServerStatus& CmdResponse_ServerStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_CmdResponse_ServerStatus.base);
  return *internal_default_instance();
}


void CmdResponse_ServerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdResponse.ServerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      role_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      leader_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      voted_for_ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_log_term_) -
        reinterpret_cast<char*>(&term_)) + sizeof(last_log_term_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&last_log_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_applied_) -
        reinterpret_cast<char*>(&last_log_index_)) + sizeof(last_applied_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdResponse_ServerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdResponse.ServerStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 commit_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_commit_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes role = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_role()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes leader_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leader_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_leader_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes voted_for_ip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voted_for_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 voted_for_port = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_voted_for_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voted_for_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_log_term = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_last_log_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_log_index = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_last_log_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_applied = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_last_applied();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_applied_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdResponse.ServerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdResponse.ServerStatus)
  return false;
#undef DO_
}

void CmdResponse_ServerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdResponse.ServerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required uint64 commit_index = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit_index(), output);
  }

  // required bytes role = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->role(), output);
  }

  // optional bytes leader_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->leader_ip(), output);
  }

  // optional int32 leader_port = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leader_port(), output);
  }

  // optional bytes voted_for_ip = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->voted_for_ip(), output);
  }

  // optional int32 voted_for_port = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->voted_for_port(), output);
  }

  // optional uint64 last_log_term = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_log_term(), output);
  }

  // optional uint64 last_log_index = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->last_log_index(), output);
  }

  // optional uint64 last_applied = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->last_applied(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdResponse.ServerStatus)
}

::google::protobuf::uint8* CmdResponse_ServerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdResponse.ServerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required uint64 commit_index = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit_index(), target);
  }

  // required bytes role = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->role(), target);
  }

  // optional bytes leader_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->leader_ip(), target);
  }

  // optional int32 leader_port = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leader_port(), target);
  }

  // optional bytes voted_for_ip = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->voted_for_ip(), target);
  }

  // optional int32 voted_for_port = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->voted_for_port(), target);
  }

  // optional uint64 last_log_term = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_log_term(), target);
  }

  // optional uint64 last_log_index = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->last_log_index(), target);
  }

  // optional uint64 last_applied = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->last_applied(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdResponse.ServerStatus)
  return target;
}

size_t CmdResponse_ServerStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:floyd.CmdResponse.ServerStatus)
  size_t total_size = 0;

  if (has_role()) {
    // required bytes role = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->role());
  }

  if (has_term()) {
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  if (has_commit_index()) {
    // required uint64 commit_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit_index());
  }

  return total_size;
}
size_t CmdResponse_ServerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdResponse.ServerStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required bytes role = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->role());

    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());

    // required uint64 commit_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes leader_ip = 4;
    if (has_leader_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_ip());
    }

    // optional bytes voted_for_ip = 6;
    if (has_voted_for_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voted_for_ip());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int32 leader_port = 5;
    if (has_leader_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_port());
    }

    // optional int32 voted_for_port = 7;
    if (has_voted_for_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voted_for_port());
    }

    // optional uint64 last_log_term = 8;
    if (has_last_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_term());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint64 last_log_index = 9;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_index());
    }

    // optional uint64 last_applied = 10;
    if (has_last_applied()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_applied());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdResponse_ServerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdResponse.ServerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdResponse_ServerStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResponse_ServerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdResponse.ServerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdResponse.ServerStatus)
    MergeFrom(*source);
  }
}

void CmdResponse_ServerStatus::MergeFrom(const CmdResponse_ServerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdResponse.ServerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_role();
      role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_leader_ip();
      leader_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_voted_for_ip();
      voted_for_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voted_for_ip_);
    }
    if (cached_has_bits & 0x00000008u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000010u) {
      commit_index_ = from.commit_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      leader_port_ = from.leader_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      voted_for_port_ = from.voted_for_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_log_term_ = from.last_log_term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      last_log_index_ = from.last_log_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      last_applied_ = from.last_applied_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CmdResponse_ServerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdResponse.ServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_ServerStatus::CopyFrom(const CmdResponse_ServerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdResponse.ServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_ServerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  return true;
}

void CmdResponse_ServerStatus::Swap(CmdResponse_ServerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResponse_ServerStatus::InternalSwap(CmdResponse_ServerStatus* other) {
  using std::swap;
  role_.Swap(&other->role_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  leader_ip_.Swap(&other->leader_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  voted_for_ip_.Swap(&other->voted_for_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(commit_index_, other->commit_index_);
  swap(leader_port_, other->leader_port_);
  swap(voted_for_port_, other->voted_for_port_);
  swap(last_log_term_, other->last_log_term_);
  swap(last_log_index_, other->last_log_index_);
  swap(last_applied_, other->last_applied_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdResponse_ServerStatus::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdResponse::InitAsDefaultInstance() {
  ::floyd::_CmdResponse_default_instance_._instance.get_mutable()->request_vote_res_ = const_cast< ::floyd::CmdResponse_RequestVoteResponse*>(
      ::floyd::CmdResponse_RequestVoteResponse::internal_default_instance());
  ::floyd::_CmdResponse_default_instance_._instance.get_mutable()->append_entries_res_ = const_cast< ::floyd::CmdResponse_AppendEntriesResponse*>(
      ::floyd::CmdResponse_AppendEntriesResponse::internal_default_instance());
  ::floyd::_CmdResponse_default_instance_._instance.get_mutable()->server_status_ = const_cast< ::floyd::CmdResponse_ServerStatus*>(
      ::floyd::CmdResponse_ServerStatus::internal_default_instance());
  ::floyd::_CmdResponse_default_instance_._instance.get_mutable()->all_servers_ = const_cast< ::floyd::Membership*>(
      ::floyd::Membership::internal_default_instance());
  ::floyd::_CmdResponse_default_instance_._instance.get_mutable()->raft_task_response_ = const_cast< ::floyd::CmdResponse_RaftTaskResponse*>(
      ::floyd::CmdResponse_RaftTaskResponse::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdResponse::kTypeFieldNumber;
const int CmdResponse::kCodeFieldNumber;
const int CmdResponse::kRequestVoteResFieldNumber;
const int CmdResponse::kAppendEntriesResFieldNumber;
const int CmdResponse::kMsgFieldNumber;
const int CmdResponse::kServerStatusFieldNumber;
const int CmdResponse::kAllServersFieldNumber;
const int CmdResponse::kRaftTaskResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResponse::CmdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_CmdResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdResponse)
}
CmdResponse::CmdResponse(const CmdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_request_vote_res()) {
    request_vote_res_ = new ::floyd::CmdResponse_RequestVoteResponse(*from.request_vote_res_);
  } else {
    request_vote_res_ = NULL;
  }
  if (from.has_append_entries_res()) {
    append_entries_res_ = new ::floyd::CmdResponse_AppendEntriesResponse(*from.append_entries_res_);
  } else {
    append_entries_res_ = NULL;
  }
  if (from.has_server_status()) {
    server_status_ = new ::floyd::CmdResponse_ServerStatus(*from.server_status_);
  } else {
    server_status_ = NULL;
  }
  if (from.has_all_servers()) {
    all_servers_ = new ::floyd::Membership(*from.all_servers_);
  } else {
    all_servers_ = NULL;
  }
  if (from.has_raft_task_response()) {
    raft_task_response_ = new ::floyd::CmdResponse_RaftTaskResponse(*from.raft_task_response_);
  } else {
    raft_task_response_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&type_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:floyd.CmdResponse)
}

void CmdResponse::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_vote_res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&request_vote_res_)) + sizeof(code_));
}

CmdResponse::~CmdResponse() {
  // @@protoc_insertion_point(destructor:floyd.CmdResponse)
  SharedDtor();
}

void CmdResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_vote_res_;
  if (this != internal_default_instance()) delete append_entries_res_;
  if (this != internal_default_instance()) delete server_status_;
  if (this != internal_default_instance()) delete all_servers_;
  if (this != internal_default_instance()) delete raft_task_response_;
}

void CmdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdResponse::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdResponse& CmdResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_CmdResponse.base);
  return *internal_default_instance();
}


void CmdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(request_vote_res_ != NULL);
      request_vote_res_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(append_entries_res_ != NULL);
      append_entries_res_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(server_status_ != NULL);
      server_status_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(all_servers_ != NULL);
      all_servers_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(raft_task_response_ != NULL);
      raft_task_response_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&type_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .floyd.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::floyd::Type_IsValid(value)) {
            set_type(static_cast< ::floyd::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .floyd.StatusCode code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::floyd::StatusCode_IsValid(value)) {
            set_code(static_cast< ::floyd::StatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_vote_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_append_entries_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes msg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .floyd.CmdResponse.ServerStatus server_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .floyd.Membership all_servers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_all_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .floyd.CmdResponse.RaftTaskResponse raft_task_response = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raft_task_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdResponse)
  return false;
#undef DO_
}

void CmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .floyd.Type type = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .floyd.StatusCode code = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_request_vote_res(), output);
  }

  // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_append_entries_res(), output);
  }

  // optional bytes msg = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->msg(), output);
  }

  // optional .floyd.CmdResponse.ServerStatus server_status = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_server_status(), output);
  }

  // optional .floyd.Membership all_servers = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_all_servers(), output);
  }

  // optional .floyd.CmdResponse.RaftTaskResponse raft_task_response = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_raft_task_response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdResponse)
}

::google::protobuf::uint8* CmdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .floyd.Type type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .floyd.StatusCode code = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_request_vote_res(), deterministic, target);
  }

  // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_append_entries_res(), deterministic, target);
  }

  // optional bytes msg = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->msg(), target);
  }

  // optional .floyd.CmdResponse.ServerStatus server_status = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_server_status(), deterministic, target);
  }

  // optional .floyd.Membership all_servers = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_all_servers(), deterministic, target);
  }

  // optional .floyd.CmdResponse.RaftTaskResponse raft_task_response = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_raft_task_response(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdResponse)
  return target;
}

size_t CmdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .floyd.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
    if (has_request_vote_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_vote_res_);
    }

    // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
    if (has_append_entries_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *append_entries_res_);
    }

    // optional .floyd.CmdResponse.ServerStatus server_status = 6;
    if (has_server_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_status_);
    }

    // optional .floyd.Membership all_servers = 7;
    if (has_all_servers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *all_servers_);
    }

    // optional .floyd.CmdResponse.RaftTaskResponse raft_task_response = 8;
    if (has_raft_task_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *raft_task_response_);
    }

  }
  // optional .floyd.StatusCode code = 2;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdResponse)
    MergeFrom(*source);
  }
}

void CmdResponse::MergeFrom(const CmdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_request_vote_res()->::floyd::CmdResponse_RequestVoteResponse::MergeFrom(from.request_vote_res());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_append_entries_res()->::floyd::CmdResponse_AppendEntriesResponse::MergeFrom(from.append_entries_res());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_server_status()->::floyd::CmdResponse_ServerStatus::MergeFrom(from.server_status());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_all_servers()->::floyd::Membership::MergeFrom(from.all_servers());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_raft_task_response()->::floyd::CmdResponse_RaftTaskResponse::MergeFrom(from.raft_task_response());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse::CopyFrom(const CmdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  if (has_request_vote_res()) {
    if (!this->request_vote_res_->IsInitialized()) return false;
  }
  if (has_append_entries_res()) {
    if (!this->append_entries_res_->IsInitialized()) return false;
  }
  if (has_server_status()) {
    if (!this->server_status_->IsInitialized()) return false;
  }
  return true;
}

void CmdResponse::Swap(CmdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResponse::InternalSwap(CmdResponse* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_vote_res_, other->request_vote_res_);
  swap(append_entries_res_, other->append_entries_res_);
  swap(server_status_, other->server_status_);
  swap(all_servers_, other->all_servers_);
  swap(raft_task_response_, other->raft_task_response_);
  swap(type_, other->type_);
  swap(code_, other->code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdResponse::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Membership::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Membership::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Membership::Membership()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_floyd_2eproto::scc_info_Membership.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.Membership)
}
Membership::Membership(const Membership& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:floyd.Membership)
}

void Membership::SharedCtor() {
}

Membership::~Membership() {
  // @@protoc_insertion_point(destructor:floyd.Membership)
  SharedDtor();
}

void Membership::SharedDtor() {
}

void Membership::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Membership::descriptor() {
  ::protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Membership& Membership::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_floyd_2eproto::scc_info_Membership.base);
  return *internal_default_instance();
}


void Membership::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.Membership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Membership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.Membership)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.Membership)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.Membership)
  return false;
#undef DO_
}

void Membership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.Membership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes nodes = 1;
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->nodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.Membership)
}

::google::protobuf::uint8* Membership::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:floyd.Membership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes nodes = 1;
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->nodes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.Membership)
  return target;
}

size_t Membership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.Membership)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes nodes = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->nodes_size());
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->nodes(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Membership::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.Membership)
  GOOGLE_DCHECK_NE(&from, this);
  const Membership* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Membership>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.Membership)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.Membership)
    MergeFrom(*source);
  }
}

void Membership::MergeFrom(const Membership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.Membership)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void Membership::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.Membership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Membership::CopyFrom(const Membership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.Membership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Membership::IsInitialized() const {
  return true;
}

void Membership::Swap(Membership* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Membership::InternalSwap(Membership* other) {
  using std::swap;
  nodes_.InternalSwap(CastToBase(&other->nodes_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Membership::GetMetadata() const {
  protobuf_floyd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_floyd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace floyd
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::Entry* Arena::CreateMaybeMessage< ::floyd::Entry >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::Entry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::CmdRequest_RequestVote* Arena::CreateMaybeMessage< ::floyd::CmdRequest_RequestVote >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::CmdRequest_RequestVote >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::CmdRequest_AppendEntries* Arena::CreateMaybeMessage< ::floyd::CmdRequest_AppendEntries >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::CmdRequest_AppendEntries >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::CmdRequest_AddServerRequest* Arena::CreateMaybeMessage< ::floyd::CmdRequest_AddServerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::CmdRequest_AddServerRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::CmdRequest_RemoveServerRequest* Arena::CreateMaybeMessage< ::floyd::CmdRequest_RemoveServerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::CmdRequest_RemoveServerRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::CmdRequest_ServerStatus* Arena::CreateMaybeMessage< ::floyd::CmdRequest_ServerStatus >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::CmdRequest_ServerStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::CmdRequest_RaftTaskRequest* Arena::CreateMaybeMessage< ::floyd::CmdRequest_RaftTaskRequest >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::CmdRequest_RaftTaskRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::CmdRequest* Arena::CreateMaybeMessage< ::floyd::CmdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::CmdRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::CmdResponse_RequestVoteResponse* Arena::CreateMaybeMessage< ::floyd::CmdResponse_RequestVoteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::CmdResponse_RequestVoteResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::CmdResponse_AppendEntriesResponse* Arena::CreateMaybeMessage< ::floyd::CmdResponse_AppendEntriesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::CmdResponse_AppendEntriesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::CmdResponse_RaftTaskResponse* Arena::CreateMaybeMessage< ::floyd::CmdResponse_RaftTaskResponse >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::CmdResponse_RaftTaskResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::CmdResponse_ServerStatus* Arena::CreateMaybeMessage< ::floyd::CmdResponse_ServerStatus >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::CmdResponse_ServerStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::CmdResponse* Arena::CreateMaybeMessage< ::floyd::CmdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::CmdResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::floyd::Membership* Arena::CreateMaybeMessage< ::floyd::Membership >(Arena* arena) {
  return Arena::CreateInternal< ::floyd::Membership >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
