package floyd;

/*
 * Entry is used storing data in raft log
 */
message Entry {
  enum OpType {
    kUnKnowCmd = 0;
    kAddServer = 1;
    kRemoveServer = 2;
    kGetAllServers = 3;
    kRaftEntryTask = 4;
  }
  optional uint64 term = 1;
  required OpType optype = 2;
  optional bytes server = 3;
  repeated bytes args = 4;
  optional uint64 reqid = 5;
}

// Raft RPC is the RPC presented in raft paper
// User cmd RPC the cmd build upon the raft protocol

enum Type {
  kUnKnowCmd = 0;
  // User cmd
  kAddServer = 1;
  kRemoveServer = 2;
  kGetAllServers = 3;

  // RaftTask
  kRaftEntryTask = 4;

  // Raft RPC
  kRequestVote = 5;
  kAppendEntries = 6;
  kServerStatus = 7;
}

message CmdRequest {
  message RequestVote {
    required uint64 term = 1;
    required bytes ip = 2;
    required int32 port = 3;
    required uint64 last_log_index = 4;
    required uint64 last_log_term = 5;
  }
  
  message AppendEntries {
    required uint64 term = 1;
    required bytes ip = 2;
    required int32 port = 3;
    required uint64 prev_log_index = 4;
    required uint64 prev_log_term = 5;
    required uint64 leader_commit = 6;
    repeated Entry entries = 7;
  }
  
  message AddServerRequest {
    required bytes new_server = 1;
  }
  
  message RemoveServerRequest {
    required bytes old_server = 1;
  }
  
  message ServerStatus {
    required int64 term = 1;
    required int64 commit_index = 2;
    optional bytes ip = 3;
    optional int32 port = 4;
  }

  message RaftTaskRequest {
    repeated bytes args = 1;
    required uint64 reqid = 2;
  }

  required Type type = 1;
  optional RequestVote request_vote = 2;
  optional AppendEntries append_entries = 3;
  optional ServerStatus server_status = 4;
  optional AddServerRequest add_server_request = 5;
  optional RemoveServerRequest remove_server_request = 6;
  optional RaftTaskRequest raft_task_request = 7;
}

enum StatusCode {
  kOk = 0;
  kNotFound = 1;
  kError = 2;
  kLocked = 3;
}

message CmdResponse {
  message RequestVoteResponse {
    required uint64 term = 1;
    required bool vote_granted = 2;
  }

  message AppendEntriesResponse {
    required uint64 term = 1;
    required bool success = 2;
    optional uint64 last_log_index = 3;
  }

  message RaftTaskResponse {
    optional bytes value = 1;
  }

  message ServerStatus {
    required uint64 term = 1;
    required uint64 commit_index = 2;
    required bytes role = 3;
    optional bytes leader_ip = 4;
    optional int32 leader_port = 5;
    optional bytes voted_for_ip = 6;
    optional int32 voted_for_port = 7;
    optional uint64 last_log_term = 8;
    optional uint64 last_log_index = 9;
    optional uint64 last_applied = 10;
  }

  required Type type = 1;
  optional StatusCode code = 2;
  optional RequestVoteResponse request_vote_res = 3;
  optional AppendEntriesResponse append_entries_res = 4;
  optional bytes msg = 5;
  optional ServerStatus server_status = 6;
  optional Membership all_servers = 7;
  optional RaftTaskResponse raft_task_response = 8;
}

message Membership {
  repeated bytes nodes = 1;
}


